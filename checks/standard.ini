; DEFAULT CONFIGURATION FROM pg_YAPT
; DO NOT ALTER THIS FILE, IT RECIEVES UPDATES
;
; CREATE A NEW FILE IN THIS DIRECTORY FOR PERSONALIZED CHECKS.
; 
;
;
; STRUCTURE OF A CHECK
; First choose a name for the Check.It's the main identifier
; and label
; [NAME]
;
; REQUIRED ATTRIBUTES
; plugin: The Plugin describes the file from plugins/.
; This checks object will be of the <plugin>-class.
;
; OPTIONAL ATTRIBUTES
; doc: Provide a documentation to this check
; isDelta: Does this check need at least two runs?
;
; PLUGINS:
; 'querycheck' is the main Plugin for Databaseusage.
; It should host all features required to gather and work on queries.
; Required Attributes:
; query: The query to ask.
; querytest: The Row/Col-Array-Representation of an example output of the query.
; units: An Array that maps different units onto the Columns.
; action: A perl lambda function thats used to aggregate the output.
; $_ is reference to the check-object itself.
; Important values:
; $_[0]{  'metric' }[<row>][>column>] 
; $_[0]{'oldmetric'}[<row>][<column>] (last-runs metric)

[AccTupleTable]
plugin='querycheck'
doc='Read and Fetched Tuples from Table'
query=<<EOT
'SELECT 
 sum( coalesce(idx_tup_fetch,0)+coalesce(seq_tup_read,0) )  
FROM pg_stat_all_tables '
EOT
querytest=[[ 0 ]]
units=['N']
isDelta=1


[Serial/Index]
querytest=[[0,0]]
doc='SeqScans vs IndexScans on Usertables'
plugin='querycheck'
query='SELECT coalesce(sum(seq_scan),0)s, coalesce(sum(idx_scan),0)i from pg_stat_user_tables;'
isDelta=1
units=['N','N']

[ReturnN]
plugin='querycheck'
doc='Returns a given number'
query='SELECT ? ';
units=['N']
querytest=[[0]]

[AccTupleIndex]
plugin='querycheck'
doc='Read and Fetched Tuples from Indices'
isDelta=1
query='SELECT coalesce(sum( coalesce(idx_tup_fetch,0)+coalesce(idx_tup_read,0) ),0) FROM pg_stat_all_indexes'
querytest=[[ 0 ]]
units=[ 'N' ]

[Locks]
query= <<EOT
'
SELECT 
(select count(*) from pg_locks )as locks 
,
(select count(*) from pg_locks where not granted) as notgranted '
EOT
doc='Total count of locks [Total count of waiting locks].'
plugin='querycheck'
querytest=[[ 0, 0  ]]
isHumanreadable=1


[BlkAcc]
doc='shmem accessed for usertables in MB'
plugin='querycheck'
query=<<EOT
'SELECT 
sum( coalesce(heap_blks_read,0)
+coalesce(heap_blks_hit,0)
+coalesce( idx_blks_hit, 0)
+coalesce( idx_blks_hit, 0)
+coalesce(toast_blks_read, 0)
+coalesce(toast_blks_hit,0)
+coalesce(tidx_blks_hit,0)
+coalesce(tidx_blks_hit,0)
)*8000 as reads 
FROM pg_statio_user_tables ;'
EOT
querytest=[[ 0 ]]
units=['B']
isDelta=1

[Random]
query='select random()*20'
plugin='querycheck'
querytest=[[ 0 ]]


[PID]
querytest=[[  0 ]]
plugin='querycheck'
doc='returns the current backendPID of the checking process. '
query='SELECT pg_backend_pid();'

[Backends]
plugin='querycheck'
colnames= ['PID','User','App','Host', 'waiting', 'age', 'state', 'CPU']
query="select pid,  usename, application_name, client_hostname, waiting, extract(seconds from( now() -  state_change)  )::int||'s' age , state from pg_stat_activity order by waiting desc, state,age ;"


[User]
querytest=[[ 0,0 ]]
plugin='querycheck'
query="select (select count(*) from pg_stat_activity), (select count(*) from pg_stat_activity where waiting='t');"
units=['N','N']


[UserCurses]
querytest=[[ 0,0,0 ]]
plugin='querycheck'
query="select (select count(*) from pg_stat_activity),(select count(*) from pg_stat_activity where waiting='t'),(select setting from pg_settings where name ='max_connections');"

[blkhitread]
querytest=[[0,0,0]]
plugin='querycheck'
isDelta=1
units=['N','N','N']
query="select sum(blks_hit), sum(blks_read), 220000 from pg_stat_database;"
doc="blocks hit and blocks fetched from io"
actioooon=<<EOT
sub{

my $rd = $_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0];
my $ftch = $_[0]{'metric'}[0][1] - $_[0]{'oldmetric'}[0][1];
my $max = $_[0]{'metric'}[0][2];

return [[[$rd,0],[$ftch,0],[$max,0]]];
}


EOT

[ServerAddr]
querytest=[[0,0]]
plugin='querycheck'
query="select inet_server_addr(),inet_server_port();"

[Time]
doc='check the local time. usefull if compared with db-host'
plugin='thetime'
isHumanreadable=1

[Inserted]
doc   = 'Tuples inserted'
querytest=[[0]]
units=['N']
query='select  sum(tup_inserted) from pg_stat_database;'
plugin='querycheck'
isDelta=1

[Fetched]
doc   = 'Tuples fetched'
querytest=[[0]]
units=['N']
query='select  sum(tup_fetched) from pg_stat_database;'
plugin='querycheck'
isDelta=1

[Returned]
doc   = 'Tuples returned'
querytest=[[0]]
units=['N']
query='select  sum(tup_returned) from pg_stat_database;'
plugin='querycheck'
isDelta=1
[Updated]
doc   = 'Tuples updated'
querytest=[[0]]
units=['N']
query='select  sum(tup_updated) from pg_stat_database;'
plugin='querycheck'
isDelta=1
[Deleted]
doc   = 'Tuples deleted'
querytest=[[0]]
units=['N']
query='select  sum(tup_deleted) from pg_stat_database;'
plugin='querycheck'
isDelta=1


[RF]
doc   = 'Tuples: (Returned Fetched)'
querytest=[[0,0]]
query='select sum(tup_returned), sum(tup_fetched)from pg_stat_database;'
plugin='querycheck'
isDelta=1
units=['N','N']


[I/U/D]
doc   = 'Tuples: (Inserts / Updates / Deletes)'
querytest=[[0,0,0,0,0]]
query='select sum(tup_inserted), sum(tup_updated), sum(tup_deleted) from pg_stat_database;'
plugin='querycheck'
isDelta=1
units=['N','N','N']

[TotRows]
units=['N']
querytest=[[ 0 ]]
query='select sum(coalesce(reltuples,0) ) from pg_class;'
plugin='querycheck'
doc='estimate of total existing tuples'

[UpTime]
query='SELECT round((extract(epoch from  now() - pg_postmaster_start_time() )/(60*60))::numeric,1)'
plugin='querycheck'
units=['h']
isHumanreadable=1
querytest=[[ 0 ]]

[Act]
units=[]
query= <<EOT
'select datname,usename,
CASE WHEN state = \'idle in transaction\' THEN \'IIT\' ELSE state END

state, pid, application_name, waiting, round(extract(epoch from now() -query_start)) from pg_stat_activity order by state_change, waiting desc;'
EOT
plugin='querycheck'

[AnlzAge]
plugin='querycheck'
doc='Age of oldest Analyze'
query='select extract(epoch from now() -min(last_analyze))::integer from pg_stat_user_tables ;'
querytest=[[ 0 ]]

[SysBlk]
plugin='querycheck'
doc='shmem accessed for systables in MB'
query='select sum( coalesce(heap_blks_read,0)+coalesce(heap_blks_hit,0)+coalesce( idx_blks_hit, 0)+coalesce( idx_blks_hit, 0)+ coalesce(toast_blks_read, 0)+coalesce(toast_blks_hit,0)+coalesce(tidx_blks_hit,0)+coalesce(tidx_blks_hit,0) ) as reads from pg_statio_sys_tables ;'
querytest=[[ 0 ]]
units=['B']
action= <<EOT
sub {
            use strict;
            no feature;
            use feature ':5.16';
            return [[[sprintf('%.f', ($_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0]) *8000), 0]]];
        }
EOT

[txID]
querytest=[[ 0 ]]
isDelta=1
units=['N']
plugin='querycheck'
query='select txid_current();'

[SIZE]
units=['B']
querytest=[[ 0 ]]
query='select round(sum(pg_database_size(datname)),1) from pg_database;'
plugin='querycheck'

[WAL]
action= <<EOT
sub {
            use strict;
            no feature;
            use feature ':5.16';
            my $walwritten = (hex(substr $_[0]{'metric'}[0][0], 2, 10) - hex(substr $_[0]{'oldmetric'}[0][0], 2, 10));
            my $walfiles = hex(substr $_[0]{'metric'}[0][1], 17, 23) - hex(substr $_[0]{'oldmetric'}[0][1], 17, 23);
            return [[[ sprintf('%.0f', $walwritten), 0],[$walfiles,$walfiles]]];
        }
EOT
units=[ 'B', 'N' ]
querytest=[[ '6/8FA66AE0', '00000001000000060000008F']]
query='select pg_current_xlog_location(), pg_xlogfile_name(pg_current_xlog_location() );'
doc='New WAL-Files | Wal written in MB'
plugin='querycheck'
isDelta=1

[MaxBlt]
plugin='querycheck'
doc='show the bloatest table'
query='select substring(relname,length(relname)-7)||\'/\'||round((coalesce(n_dead_tup,0)/(coalesce(n_dead_tup::numeric,1)+coalesce(n_live_tup::numeric,1) ))*100,0)::text||\'%\' from pg_stat_user_tables where n_live_tup > 0 order by n_dead_tup / n_live_tup desc limit 1 ;'
querytest=[['_tellers/50%' ]]
