; DEFAULT CONFIGURATION FROM pg_YAPT
; DO NOT ALTER THIS FILE, IT RECIEVES UPDATES
;
; CREATE A NEW FILE IN THIS DIRECTORY FOR PERSONALIZED CHECKS.
; 
;
;
; STRUCTURE OF A CHECK
; First choose a name for the Check.It's the main identifier
; and label
; [NAME]
;
; REQUIRED ATTRIBUTES
; plugin: The Plugin describes the file from plugins/.
; This checks object will be of the <plugin>-class.
;
; OPTIONAL ATTRIBUTES
; doc: Provide a documentation to this check
; isDelta: Does this check need at least two runs?
;
; PLUGINS:
; 'querycheck' is the main Plugin for Databaseusage.
; It should host all features required to gather and work on queries.
; Required Attributes:
; query: The query to ask.
; querytest: The Row/Col-Array-Representation of an example output of the query.
; units: An Array that maps different units onto the Columns.
; action: A perl lambda function thats used to aggregate the output.
; $_ is reference to the check-object itself.
; Important values:
; $_[0]{  'metric' }[<row>][>column>] 
; $_[0]{'oldmetric'}[<row>][<column>] (last-runs metric)

[RTupT]
plugin='querycheck'
doc='Read Tuples from Table'
query='select sum( coalesce(idx_tup_fetch,0)+coalesce(seq_tup_read,0) )  from pg_stat_user_tables '
querytest=[[ 0 ]]
units=[          ''        ]
action= <<EOT
sub {
            use strict;
            no feature;
            use feature ':5.16';
            my $TBL = $_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0];
            return [[[int $TBL, 0]]];
        }
EOT

[S/I]
querytest=[          [            0,            0          ]        ]
action= <<EOT
sub {
            use strict;
            no feature;
            use feature ':5.16';
            my $SEQ = $_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0];
            my $IDX = $_[0]{'metric'}[0][1] - $_[0]{'oldmetric'}[0][1];
            my $total = $SEQ + $IDX;
            if ($total <= 0) {
                $total = 1;
            }
            return [[[int(10 * $SEQ / $total) . '/' . int(10 * $IDX / $total) . '|' . int($total / 10000) . 'k', 0]]];
        }
EOT
doc='SeqScans vs IndexScans on usertables'
plugin='querycheck'
query='select coalesce(sum(seq_scan),0), coalesce(sum(idx_scan),0) from pg_stat_user_tables;'

[RTupI]
plugin='querycheck'
doc='Read Tuples from Index'
query='select sum( coalesce(idx_tup_fetch,0)+coalesce(idx_tup_read,0) ) from pg_stat_user_indexes'
action= <<EOT
sub {
            use strict;
            no feature;
            use feature ':5.16';
            my $IDX = $_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0];
            return [[[int $IDX, 0]]];
        }
EOT
querytest=[[ 0 ]]
units=[          ''        ]

[Locks]
query= <<EOT
'
select * from 
(select count(*) from pg_locks )as locks 
join 
(select count(*) from pg_locks where not granted) as notgranted 
on true;'
EOT
doc=' locks[waiting] . Will ignore locks for this backend'
plugin='querycheck'
action= <<EOT
sub {
            use strict;
            no feature;
            use feature ':5.16';
            return [[[$_[0]{'metric'}[0][0] . '/' . $_[0]{'metric'}[0][1] . '', floor($_[0]{'metric'}[0][1] / 5)]]];
        }
EOT
querytest=[          [            0,            0          ]        ]

[QTime]
action= <<EOT
sub {
            use strict;
            no feature;
            use feature ':5.16';
            return [[[sprintf('%.2f', ($_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0]) / 1000), 0]]];
        }
EOT
units=[          's'        ]
querytest=[[ 0 ]]
query='Select sum( total_time ) from pg_stat_statements'
doc='total time of querys. Part of pg_stat_statements!'
plugin='querycheck'

[BlkAcc]
doc='shmem accessed for usertables in MB'
plugin='querycheck'
query='select sum( coalesce(heap_blks_read,0)+coalesce(heap_blks_hit,0)+coalesce( idx_blks_hit, 0)+coalesce( idx_blks_hit, 0)+ coalesce(toast_blks_read, 0)+coalesce(toast_blks_hit,0)+coalesce(tidx_blks_hit,0)+coalesce(tidx_blks_hit,0) ) as reads from pg_statio_user_tables ;'
querytest=[[ 0 ]]
units=[          'MB'        ]
action= <<EOT
sub {
            use strict;
            no feature;
            use feature ':5.16';
            return [[[sprintf('%.f', ($_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0]) / 125), 0]]];
        }
EOT

[Random]
query='select random()*20'
plugin='querycheck'
querytest=[[ 0 ]]


[PID]
querytest=[          [            1234          ]        ]
plugin='querycheck'
doc='returns the current backendPID of the checking process. '
query='Select pg_backend_pid();'

[User]
querytest=[          [            0          ]        ]
plugin='querycheck'
query='select count(*) from pg_stat_activity;'

[hosttime]
doc='check the local time. usefull if compared with db-host'
plugin='thetime'

[I/U/D]
action= <<EOT
sub {
            use strict;
            no feature;
            use feature ':5.16';
            my $INS = $_[0]{'metric'}[0][2] - $_[0]{'oldmetric'}[0][2];
            my $UPD = $_[0]{'metric'}[0][3] - $_[0]{'oldmetric'}[0][3];
            my $DEL = $_[0]{'metric'}[0][4] - $_[0]{'oldmetric'}[0][4];
            my $total = $INS + $UPD + $DEL;
            if ($total <= 0) {
                $total = 1;
            }
            $INS = int 10 * $INS / $total;
            $UPD = int 10 * $UPD / $total;
            $DEL = int 10 * $DEL / $total;
            return [[[$INS . '/' . $UPD . '/' . $DEL . '|' . int($total / 10000) . 'k', 0]]];
        }
EOT
querytest=[          [            1,            2,            3,            4,            5          ]        ]
query='select sum(tup_returned), sum(tup_fetched), sum(tup_inserted), sum(tup_updated), sum(tup_deleted) from pg_stat_database;'
plugin='querycheck'

[TotRows]
units=[          'm'        ]
querytest=[          [            0          ]        ]
action= <<EOT
sub {
            use strict;
            no feature;
            use feature ':5.16';
            return [[[sprintf('%.1f', $_[0]{'metric'}[0][0] / 1000000), 0]]];
        }
EOT
query='select sum(coalesce(reltuples,0) ) from pg_class;'
plugin='querycheck'
doc='estimate of total existing tuples'

[UpTime]
query='SELECT round((extract(epoch from  now() - pg_postmaster_start_time() )/(60*60))::numeric,1)'
plugin='querycheck'
units=[          'h'        ]
querytest=[          [            0          ]        ]

[Act]
units=[]
query= <<EOT
'select datname,usename,
CASE WHEN state = \'idle in transaction\' THEN \'IIT\' ELSE state END

state, pid, application_name, waiting, round(extract(epoch from now() -query_start)) from pg_stat_activity order by state_change, waiting desc;'
EOT
plugin='querycheck'

[AnlzAge]
plugin='querycheck'
doc='Age of oldest Analyze'
query='select extract(epoch from now() -min(last_analyze))::integer from pg_stat_user_tables ;'
querytest=[          [            0          ]        ]

[SysBlk]
plugin='querycheck'
doc='shmem accessed for systables in MB'
query='select sum( coalesce(heap_blks_read,0)+coalesce(heap_blks_hit,0)+coalesce( idx_blks_hit, 0)+coalesce( idx_blks_hit, 0)+ coalesce(toast_blks_read, 0)+coalesce(toast_blks_hit,0)+coalesce(tidx_blks_hit,0)+coalesce(tidx_blks_hit,0) ) as reads from pg_statio_sys_tables ;'
querytest=[          [            0          ]        ]
units=[          'MB'        ]
action= <<EOT
sub {
            use strict;
            no feature;
            use feature ':5.16';
            return [[[sprintf('%.f', ($_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0]) / 125), 0]]];
        }
EOT

[txID]
action= <<EOT
sub {
            use strict;
            no feature;
            use feature ':5.16';
            return [[[$_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0], 0]]];
        }
EOT
querytest=[          [            0          ]        ]
plugin='querycheck'
query='select txid_current();'

[SIZE]
units=[          'GB'        ]
querytest=[          [            0          ]        ]
query='select round(sum(pg_database_size(datname))/(1024*1024*1024),1) from pg_database;'
plugin='querycheck'

[WAL]
action= <<EOT
sub {
            use strict;
            no feature;
            use feature ':5.16';
            my $walwritten = (hex(substr $_[0]{'metric'}[0][0], 2, 10) - hex(substr $_[0]{'oldmetric'}[0][0], 2, 10)) / 1048576;
            my $walfiles = hex(substr $_[0]{'metric'}[0][1], 17, 23) - hex(substr $_[0]{'oldmetric'}[0][1], 17, 23);
            return [[[$walfiles . '|' . sprintf('%.0f', $walwritten), $walfiles]]];
        }
EOT
units=[          'MB'        ]
querytest=[          [            '6/8FA66AE0',            '00000001000000060000008F'          ]        ]
query='select pg_current_xlog_location(), pg_xlogfile_name(pg_current_xlog_location() );'
doc='New WAL-Files | Wal written in MB'
plugin='querycheck'
isDelta=1

[MaxBlt]
plugin='querycheck'
query='select substring(relname,length(relname)-7)||\'/\'||round((coalesce(n_dead_tup,0)/(coalesce(n_dead_tup::numeric,1)+coalesce(n_live_tup::numeric,1) ))*100,0)::text||\'%\' from pg_stat_user_tables where n_live_tup > 0 order by n_dead_tup / n_live_tup desc limit 1 ;'
querytest=[          [            '_tellers/50%'          ]        ]
