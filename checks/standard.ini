[Act]
plugin='querycheck'
query='select datname,usename,CASE WHEN state = \'idle in transaction\' THEN \'IIT\' ELSE state ENDstate, pid, application_name, waiting, round(extract(epoch from now() -query_start)) from pg_stat_activity order by state_change, waiting desc;'
units=[]

[Random]
query='select random()*20'
querytest=[          [            0          ]        ]
plugin='querycheck'

[S/I]
query='select sum(seq_scan), sum(idx_scan) from pg_stat_user_tables;'
doc='SeqScans vs IndexScans on usertables'
plugin='querycheck'
querytest=[          [            0,            0          ]        ]
action=sub {            use strict;            no feature;            use feature ':5.16';            my $SEQ = $_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0];            my $IDX = $_[0]{'metric'}[0][1] - $_[0]{'oldmetric'}[0][1];            my $total = $SEQ + $IDX;            if ($total <= 0) {                $total = 1;            }            return [[[int(10 * $SEQ / $total) . '/' . int(10 * $IDX / $total) . '|' . int($total / 10000) . 'k', 0]]];        }

[SysBlk]
doc='shmem accessed for systables in MB'
query='select sum( coalesce(heap_blks_read,0)+coalesce(heap_blks_hit,0)+coalesce( idx_blks_hit, 0)+coalesce( idx_blks_hit, 0)+ coalesce(toast_blks_read, 0)+coalesce(toast_blks_hit,0)+coalesce(tidx_blks_hit,0)+coalesce(tidx_blks_hit,0) ) as reads from pg_statio_sys_tables ;'
units=[          'MB'        ]
querytest=[          [            0          ]        ]
plugin='querycheck'
action=sub {            use strict;            no feature;            use feature ':5.16';            return [[[sprintf('%.f', ($_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0]) / 125), 0]]];        }

[Locks]
query='select * from (select count(*) from pg_locks )as locks join (select count(*) from pg_locks where not granted) as notgranted on true;'
doc=' locks[waiting] . Will ignore locks for this backend'
plugin='querycheck'
querytest=[          [            0,            0          ]        ]
action=sub {            use strict;            no feature;            use feature ':5.16';            return [[[$_[0]{'metric'}[0][0] . '/' . $_[0]{'metric'}[0][1] . '', floor($_[0]{'metric'}[0][1] / 5)]]];        }

[hosttime]
doc='check the local time. usefull if compared with db-host'
plugin='thetime'

[SIZE]
querytest=[          [            0          ]        ]
plugin='querycheck'
query='select round(sum(pg_database_size(datname))/(1024*1024*1024),1) from pg_database;'
units=[          'GB'        ]

[PID]
querytest=[          [            1234          ]        ]
plugin='querycheck'
doc='returns the current backendPID of the checking process. '
query='Select pg_backend_pid();'

[QTime]
doc='total time of querys. Part of pg_stat_statements!'
units=[          's'        ]
query='Select sum( total_time ) from pg_stat_statements'
querytest=[          [            0          ]        ]
plugin='querycheck'
action=sub {            use strict;            no feature;            use feature ':5.16';            return [[[sprintf('%.2f', ($_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0]) / 1000), 0]]];        }

[MAXTime]
doc='total cpu-cycles of queries. Part of an experimental pg_stat_statementsbuild!'
query='Select sum( upper ) from pg_stat_statements'
units=[          's'        ]
querytest=[          [            0          ]        ]
plugin='querycheck'
action=sub {            use strict;            no feature;            use feature ':5.16';            return [[[sprintf('%.2f', $_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0]), 0]]];        }

[WALRPL]
plugin='querycheck'
isDelta=1
querytest=[          [            '6/8FA66AE0',            '00000001000000060000008F'          ]        ]
query='select pg_current_xlog_location(), pg_current_xlog_insert_location();'
units=[          'MB'        ]
doc='New WAL-Files | Wal written in MB'
action=sub {            use strict;            no feature;            use feature ':5.16';            my $walwritten = (hex(substr $_[0]{'metric'}[0][1], 2, 10) - hex(substr $_[0]{'metric'}[0][0], 2, 10)) / 1048576;            return [[[sprintf('%.0f', $walwritten), 0]]];        }

[RTupT]
query='select sum( coalesce(idx_tup_fetch,0)+coalesce(seq_tup_read,0) )  from pg_stat_user_tables '
units=[          ''        ]
doc='Read Tuples from Table'
plugin='querycheck'
querytest=[          [            0          ]        ]
action=sub {            use strict;            no feature;            use feature ':5.16';            my $TBL = $_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0];            return [[[int $TBL, 0]]];        }

[txID]
query='select txid_current();'
plugin='querycheck'
querytest=[          [            0          ]        ]
action=sub {            use strict;            no feature;            use feature ':5.16';            return [[[$_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0], 0]]];        }

[I/U/D]
query='select sum(tup_returned), sum(tup_fetched), sum(tup_inserted), sum(tup_updated), sum(tup_deleted) from pg_stat_database;'
plugin='querycheck'
querytest=[          [            1,            2,            3,            4,            5          ]        ]
action=sub {            use strict;            no feature;            use feature ':5.16';            my $INS = $_[0]{'metric'}[0][2] - $_[0]{'oldmetric'}[0][2];            my $UPD = $_[0]{'metric'}[0][3] - $_[0]{'oldmetric'}[0][3];            my $DEL = $_[0]{'metric'}[0][4] - $_[0]{'oldmetric'}[0][4];            my $total = $INS + $UPD + $DEL;            if ($total <= 0) {                $total = 1;            }            $INS = int 10 * $INS / $total;            $UPD = int 10 * $UPD / $total;            $DEL = int 10 * $DEL / $total;            return [[[$INS . '/' . $UPD . '/' . $DEL . '|' . int($total / 10000) . 'k', 0]]];        }

[User]
plugin='querycheck'
querytest=[          [            0          ]        ]
query='select count(*) from pg_stat_activity;'

[UpTime]
plugin='querycheck'
querytest=[          [            0          ]        ]
units=[          'h'        ]
query='SELECT round((extract(epoch from  now() - pg_postmaster_start_time() )/(60*60))::numeric,1)'

[AnlzAge]
doc='Age of oldest Analyze'
query='select extract(epoch from now() -min(last_analyze))::integer from pg_stat_user_tables ;'
querytest=[          [            0          ]        ]
plugin='querycheck'

[MaxBlt]
querytest=[          [            '_tellers/50%'          ]        ]
plugin='querycheck'
query='select substring(relname,length(relname)-7)||\'/\'||round((coalesce(n_dead_tup,0)/(coalesce(n_dead_tup::numeric,1)+coalesce(n_live_tup::numeric,1) ))*100,0)::text||\'%\' from pg_stat_user_tables where n_live_tup > 0 order by n_dead_tup / n_live_tup desc limit 1 ;'

[ETime]
querytest=[          [            0          ]        ]
plugin='querycheck'
doc='total cpu-cycles of queries. Part of an experimental pg_stat_statementsbuild!'
query='Select sum( exectime ) from pg_stat_statements'
units=[          's'        ]
action=sub {            use strict;            no feature;            use feature ':5.16';            return [[[sprintf('%.2f', ($_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0]) / 3000000), 0]]];        }

[BlkAcc]
querytest=[          [            0          ]        ]
plugin='querycheck'
doc='shmem accessed for usertables in MB'
units=[          'MB'        ]
query='select sum( coalesce(heap_blks_read,0)+coalesce(heap_blks_hit,0)+coalesce( idx_blks_hit, 0)+coalesce( idx_blks_hit, 0)+ coalesce(toast_blks_read, 0)+coalesce(toast_blks_hit,0)+coalesce(tidx_blks_hit,0)+coalesce(tidx_blks_hit,0) ) as reads from pg_statio_user_tables ;'
action=sub {            use strict;            no feature;            use feature ':5.16';            return [[[sprintf('%.f', ($_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0]) / 125), 0]]];        }

[RTupI]
querytest=[          [            0          ]        ]
plugin='querycheck'
doc='Read Tuples from Index'
query='select sum( coalesce(idx_tup_fetch,0)+coalesce(idx_tup_read,0) ) from pg_stat_user_indexes'
units=[          ''        ]
action=sub {            use strict;            no feature;            use feature ':5.16';            my $IDX = $_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0];            return [[[int $IDX, 0]]];        }

[PTime]
doc='total cpu-cycles of queries. Part of an experimental pg_stat_statementsbuild!'
query='Select sum( parsetime ) from pg_stat_statements'
units=[          's'        ]
querytest=[          [            0          ]        ]
plugin='querycheck'
action=sub {            use strict;            no feature;            use feature ':5.16';            return [[[sprintf('%.2f', ($_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0]) / 3000000), 0]]];        }

[WAL]
doc='New WAL-Files | Wal written in MB'
units=[          'MB'        ]
query='select pg_current_xlog_location(), pg_xlogfile_name(pg_current_xlog_location() );'
isDelta=1
querytest=[          [            '6/8FA66AE0',            '00000001000000060000008F'          ]        ]
plugin='querycheck'
action=sub {            use strict;            no feature;            use feature ':5.16';            my $walwritten = (hex(substr $_[0]{'metric'}[0][0], 2, 10) - hex(substr $_[0]{'oldmetric'}[0][0], 2, 10)) / 1048576;            my $walfiles = hex(substr $_[0]{'metric'}[0][1], 17, 23) - hex(substr $_[0]{'oldmetric'}[0][1], 17, 23);            return [[[$walfiles . '|' . sprintf('%.0f', $walwritten), $walfiles]]];        }

[CTime]
plugin='querycheck'
querytest=[          [            0          ]        ]
query='Select sum(parsetime) + sum( exectime ) from pg_stat_statements'
units=[          's'        ]
doc='total cpu-cycles of queries. Part of an experimental pg_stat_statementsbuild!'
action=sub {            use strict;            no feature;            use feature ':5.16';            return [[[sprintf('%.2f', ($_[0]{'metric'}[0][0] - $_[0]{'oldmetric'}[0][0]) / 3000000), 0]]];        }

[TotRows]
plugin='querycheck'
querytest=[          [            0          ]        ]
query='select sum(coalesce(reltuples,0) ) from pg_class;'
units=[          'm'        ]
doc='estimate of total existing tuples'
action=sub {            use strict;            no feature;            use feature ':5.16';            return [[[sprintf('%.1f', $_[0]{'metric'}[0][0] / 1000000), 0]]];        }
